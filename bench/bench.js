!function(){"use strict";const pTry=(t,...e)=>new Promise(s=>{s(t(...e))});var pTry_1=pTry,default_1=pTry;pTry_1.default=default_1;const pLimit=t=>{if(t<1)throw new TypeError("Expected `concurrency` to be a number from 1 and up");const e=[];let s=0;const n=()=>{s--,e.length>0&&e.shift()()},o=(t,e,...o)=>{s++;const r=pTry_1(t,...o);e(r),r.then(n,n)},r=(n,...r)=>new Promise(i=>((n,r,...i)=>{s<t?o(n,r,...i):e.push(o.bind(null,n,r,...i))})(n,i,...r));return Object.defineProperties(r,{activeCount:{get:()=>s},pendingCount:{get:()=>e.length}}),r};var pLimit_1=pLimit,default_1$1=pLimit;pLimit_1.default=default_1$1;const shimport=window.__shimport__,ITERATIONS=500,CONCURRENCY=20,TESTS=[createTest("CJS: fetch -> eval -> lodash.js","./lodash.js",testCJS),createTest("CJS: fetch -> eval -> lodash.min.js","./lodash.min.js",testCJS),createTest("shimImport: fetch -> shimport -> eval -> lodash.esm.js","./lodash.esm.js",testShimport),createTest("shimImport: fetch -> shimport -> eval -> lodash.esm.min.js","./lodash.esm.min.js",testShimport),createTest("ESM: dynamic import -> lodash.esm.js","./lodash.esm.js",testESM),createTest("ESM: dynamic import -> lodash.esm.min.js","./lodash.esm.min.js",testESM)],limit=pLimit_1(CONCURRENCY);async function runTests(){let t,e;for(let e=0;e<TESTS.length;e++)(t=TESTS[e]).duration=await runTest(t);TESTS.sort((t,e)=>t.duration<e.duration?-1:1);const s=TESTS[0];TESTS.forEach(({name:t,duration:n},o)=>{e=o?`, ${(100*(1-s.duration/n)).toFixed(2)}% slower than [${s.name}]`:"",console.log(`[${t}] took ${n}ms${e}`)})}function createTest(t,e,s){return{name:t,url:e,fn:s}}async function runTest({name:t,url:e,fn:s}){console.log(`Running [${t}], ${ITERATIONS} times...`);const n=[];for(let t=0;t<ITERATIONS;t++)n.push(limit(()=>s(`${e}?key=${Date.now()+t}`)));const o=Date.now();return await Promise.all(n),Date.now()-o}async function testCJS(url){const text=await fetch(url).then(t=>t.text()),cjsWrapper=`(function() { let exports = {}; let module = { exports }; ${text}; return exports; })();`;return eval(cjsWrapper)}async function testESM(t){return Function(`return import('${t}')`)()}async function testShimport(t){return shimport.load(t)}runTests()}();
